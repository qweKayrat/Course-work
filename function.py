# ord()  # Определение кода символа
# String - Строка

# String.upper()  # Возвращает строку с буквами в большом регистре
# String.lower()  # Возвращает строку с буквами в маленьком регистре

# String.count(sub, star, end)  # Определяет число вхождений подстроки в строке

# String.find(sub, star, end)  # Возвращает индекс первого найденного вхождения
# String.frind(sub, star, end)  # Возвращает индекс первого найденного вхождения при поиске справа
# String.index(sub, star, end)  # Возвращает индекс первого найденного вхождения

# String.replace(old, new, count=-1)  # Заменяет строку old на new

# String.isalpha()  # Определяет: состоит ли строка целиком из буквенных символов
# String.isdigit()  # Определяет: состоит ли строка целиком из цифр

# String.rjust(width[, fillchar = ‘ ‘])  #  Расширяет строку, добавляя символы слева
# String.ljust(width[, fillchar = ‘ ‘])  #  Расширяет строку, добавляя символы справа

# String.split(sep=None, maxsplit=-1)  #  Разбивает строку на подстроки
# String.join(список)  # Объединяет коллекцию в строку

# String.strip()  # Удаляет пробелы и переносы строк справа и слева
# String.rstrip()  #  Удаляет пробелы и переносы строк справа
# String.lstrip()  #  Удаляет пробелы и переносы строк слева

# List - Список

# List.index(sub, star, end)  # Возвращает индекс первого найденного вхождения
# List.count(sub, star, end)  # Определяет число вхождений подстроки в строке

# List.append(99)  # добавляет 1 элемент в конце списка
# List.extend([sub, sub, sub])  # добавляет список элементов в конце списка
# List.insert(index, sub)  # Добавляет элемент по заданному индексу
# List.remove(sub)  # Удаляет первый по найденному совпадению элемент из списка по значению
# List.clear()  # Полностью очищает список

# List.pop(0)  # удаляет элемент по индексу (index)
# List.pop()  # удаляет последний элемент из списка () и возвращает удалённый элемент

# List.copy() # возвращает копию списка, так создаются элементы с разными ячейками памяти

# List.sort()  # отсортировали список по возрастанию (reverse=False)
# List.reverse()  # перестроили элементы списка в обратном порядке индексов


# List comprehension Фишки

# Matrix = [[a for a in range(3)] for b in range(4)]
# out: [[0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2]]

# A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# a = [x
#      for row in A
#      for x in row
#      ]
# out: [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Транспонирование матрицы:
# A = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
# A = [[row[i] for row in A] for i in renge(len(A[0]))]
# out:
# [1, 2, 3, 4]             [1, 5, 9]
# [5, 6, 7, 8]        ->   [2, 6, 10]
# [9, 10, 11, 12]          [3, 7, 11]
#                          [4, 8, 12]

# g = [u**2 for u in [x+1 for x in range(5)]]

# Dict - Словарь

# dict(key=value, key=value,..)  # Создание словаря
# Dict.fromkeys[список[, значение по умолчанию]  # Формирует словарь с заданными ключами и некоторым значением

# d[key]  # Получение значения по ключу, если ввести несуществующий ключ => Ошибка
# Dict.get(key)  # Получение значения по ключу, если ввести несуществующий ключ возвратит None или значение по умолчанию
# Dict.get(key, False), если ввести не существующий ключ, возвратит False
# Dict.setdefault[key[, default]] # Возвращает значение по ключу, если ключ в словаре отсутствует, то создаёт запись в словаре с
# не существующем ключом, и заданным значением{default}

# Dict.keys()  # Возвращает список ключей
# Dict.value()  # Возвращает список значение
# Dict.items()  # Возвращает Кортеж ключ, значение (key, value)

# Dict.update(Dict2)  # Обновление Словаря 1, Словарём2 (В 1 словарь обновляются и добавляются значения словаря2 )
# Пример D1 = {'one': 1, 'two': 2} || D2 = {'two': 'Два', 'three': 'Три'}
# D1.update(D2)  => {'one': 1, 'two': 'Два', 'three': 'Три'}
# D3 = {**D, **D2}  # Синтаксис объединения словарей, (В 1 словаре обновляются значения по 1 ключу с словарём 2)
# После версии Python 3.9 объединить словарь можно ещё так:
# D1 | D2

# Dict.copy()  # Возвращает копию словаря, так создаются элементы с разными ячейками памяти
# Dict2 = dict(Dict) # Способ копирования словаря, с разными ячейками памяти

# Dict.clear()  # Полностью очищает словарь
# del Dict[key]  # удаление из словаря по ключу
# Dict.pop(key)  # удаляет элемент по ключу
# Dict.popitem()  # удаляет "Случайный"(Последний) выбранный ключ и возвращает удалённый элемент
# Dict(Cловарь) является не упорядоченной коллекцией до версии 3.7
